// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: kamchatka.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	KamchatkaService_GetRouteCoordinates_FullMethodName        = "/main.KamchatkaService/GetRouteCoordinates"
	KamchatkaService_GetRecreationalCapacity_FullMethodName    = "/main.KamchatkaService/GetRecreationalCapacity"
	KamchatkaService_AddAlert_FullMethodName                   = "/main.KamchatkaService/AddAlert"
	KamchatkaService_CreateUser_FullMethodName                 = "/main.KamchatkaService/CreateUser"
	KamchatkaService_UpdateRecreationalCapacity_FullMethodName = "/main.KamchatkaService/UpdateRecreationalCapacity"
	KamchatkaService_GetGroups_FullMethodName                  = "/main.KamchatkaService/GetGroups"
	KamchatkaService_GetGroupTerritories_FullMethodName        = "/main.KamchatkaService/GetGroupTerritories"
	KamchatkaService_GetSatelliteAlerts_FullMethodName         = "/main.KamchatkaService/GetSatelliteAlerts"
)

// KamchatkaServiceClient is the client API for KamchatkaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KamchatkaServiceClient interface {
	GetRouteCoordinates(ctx context.Context, in *GetRouteCoordinatesRequest, opts ...grpc.CallOption) (*GetRouteCoordinatesResponse, error)
	GetRecreationalCapacity(ctx context.Context, in *GetRecreationalCapacityRequest, opts ...grpc.CallOption) (*GetRecreationalCapacityResponse, error)
	AddAlert(ctx context.Context, in *AddAlertRequest, opts ...grpc.CallOption) (*StringResultResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateRecreationalCapacity(ctx context.Context, in *UpdateRecreationalCapacityRequest, opts ...grpc.CallOption) (*UpdateRecreationalCapacityResponse, error)
	GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error)
	GetGroupTerritories(ctx context.Context, in *GetGroupTerritoriesRequest, opts ...grpc.CallOption) (*GetGroupTerritoriesResponse, error)
	GetSatelliteAlerts(ctx context.Context, in *GetSatelliteAlertsRequest, opts ...grpc.CallOption) (*GetSatelliteAlertsResponse, error)
}

type kamchatkaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKamchatkaServiceClient(cc grpc.ClientConnInterface) KamchatkaServiceClient {
	return &kamchatkaServiceClient{cc}
}

func (c *kamchatkaServiceClient) GetRouteCoordinates(ctx context.Context, in *GetRouteCoordinatesRequest, opts ...grpc.CallOption) (*GetRouteCoordinatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRouteCoordinatesResponse)
	err := c.cc.Invoke(ctx, KamchatkaService_GetRouteCoordinates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kamchatkaServiceClient) GetRecreationalCapacity(ctx context.Context, in *GetRecreationalCapacityRequest, opts ...grpc.CallOption) (*GetRecreationalCapacityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecreationalCapacityResponse)
	err := c.cc.Invoke(ctx, KamchatkaService_GetRecreationalCapacity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kamchatkaServiceClient) AddAlert(ctx context.Context, in *AddAlertRequest, opts ...grpc.CallOption) (*StringResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResultResponse)
	err := c.cc.Invoke(ctx, KamchatkaService_AddAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kamchatkaServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, KamchatkaService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kamchatkaServiceClient) UpdateRecreationalCapacity(ctx context.Context, in *UpdateRecreationalCapacityRequest, opts ...grpc.CallOption) (*UpdateRecreationalCapacityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRecreationalCapacityResponse)
	err := c.cc.Invoke(ctx, KamchatkaService_UpdateRecreationalCapacity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kamchatkaServiceClient) GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupsResponse)
	err := c.cc.Invoke(ctx, KamchatkaService_GetGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kamchatkaServiceClient) GetGroupTerritories(ctx context.Context, in *GetGroupTerritoriesRequest, opts ...grpc.CallOption) (*GetGroupTerritoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupTerritoriesResponse)
	err := c.cc.Invoke(ctx, KamchatkaService_GetGroupTerritories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kamchatkaServiceClient) GetSatelliteAlerts(ctx context.Context, in *GetSatelliteAlertsRequest, opts ...grpc.CallOption) (*GetSatelliteAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSatelliteAlertsResponse)
	err := c.cc.Invoke(ctx, KamchatkaService_GetSatelliteAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KamchatkaServiceServer is the server API for KamchatkaService service.
// All implementations must embed UnimplementedKamchatkaServiceServer
// for forward compatibility
type KamchatkaServiceServer interface {
	GetRouteCoordinates(context.Context, *GetRouteCoordinatesRequest) (*GetRouteCoordinatesResponse, error)
	GetRecreationalCapacity(context.Context, *GetRecreationalCapacityRequest) (*GetRecreationalCapacityResponse, error)
	AddAlert(context.Context, *AddAlertRequest) (*StringResultResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateRecreationalCapacity(context.Context, *UpdateRecreationalCapacityRequest) (*UpdateRecreationalCapacityResponse, error)
	GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsResponse, error)
	GetGroupTerritories(context.Context, *GetGroupTerritoriesRequest) (*GetGroupTerritoriesResponse, error)
	GetSatelliteAlerts(context.Context, *GetSatelliteAlertsRequest) (*GetSatelliteAlertsResponse, error)
	mustEmbedUnimplementedKamchatkaServiceServer()
}

// UnimplementedKamchatkaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKamchatkaServiceServer struct {
}

func (UnimplementedKamchatkaServiceServer) GetRouteCoordinates(context.Context, *GetRouteCoordinatesRequest) (*GetRouteCoordinatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteCoordinates not implemented")
}
func (UnimplementedKamchatkaServiceServer) GetRecreationalCapacity(context.Context, *GetRecreationalCapacityRequest) (*GetRecreationalCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecreationalCapacity not implemented")
}
func (UnimplementedKamchatkaServiceServer) AddAlert(context.Context, *AddAlertRequest) (*StringResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAlert not implemented")
}
func (UnimplementedKamchatkaServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedKamchatkaServiceServer) UpdateRecreationalCapacity(context.Context, *UpdateRecreationalCapacityRequest) (*UpdateRecreationalCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecreationalCapacity not implemented")
}
func (UnimplementedKamchatkaServiceServer) GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedKamchatkaServiceServer) GetGroupTerritories(context.Context, *GetGroupTerritoriesRequest) (*GetGroupTerritoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupTerritories not implemented")
}
func (UnimplementedKamchatkaServiceServer) GetSatelliteAlerts(context.Context, *GetSatelliteAlertsRequest) (*GetSatelliteAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSatelliteAlerts not implemented")
}
func (UnimplementedKamchatkaServiceServer) mustEmbedUnimplementedKamchatkaServiceServer() {}

// UnsafeKamchatkaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KamchatkaServiceServer will
// result in compilation errors.
type UnsafeKamchatkaServiceServer interface {
	mustEmbedUnimplementedKamchatkaServiceServer()
}

func RegisterKamchatkaServiceServer(s grpc.ServiceRegistrar, srv KamchatkaServiceServer) {
	s.RegisterService(&KamchatkaService_ServiceDesc, srv)
}

func _KamchatkaService_GetRouteCoordinates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteCoordinatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KamchatkaServiceServer).GetRouteCoordinates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KamchatkaService_GetRouteCoordinates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KamchatkaServiceServer).GetRouteCoordinates(ctx, req.(*GetRouteCoordinatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KamchatkaService_GetRecreationalCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecreationalCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KamchatkaServiceServer).GetRecreationalCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KamchatkaService_GetRecreationalCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KamchatkaServiceServer).GetRecreationalCapacity(ctx, req.(*GetRecreationalCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KamchatkaService_AddAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KamchatkaServiceServer).AddAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KamchatkaService_AddAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KamchatkaServiceServer).AddAlert(ctx, req.(*AddAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KamchatkaService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KamchatkaServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KamchatkaService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KamchatkaServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KamchatkaService_UpdateRecreationalCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecreationalCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KamchatkaServiceServer).UpdateRecreationalCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KamchatkaService_UpdateRecreationalCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KamchatkaServiceServer).UpdateRecreationalCapacity(ctx, req.(*UpdateRecreationalCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KamchatkaService_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KamchatkaServiceServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KamchatkaService_GetGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KamchatkaServiceServer).GetGroups(ctx, req.(*GetGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KamchatkaService_GetGroupTerritories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupTerritoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KamchatkaServiceServer).GetGroupTerritories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KamchatkaService_GetGroupTerritories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KamchatkaServiceServer).GetGroupTerritories(ctx, req.(*GetGroupTerritoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KamchatkaService_GetSatelliteAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSatelliteAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KamchatkaServiceServer).GetSatelliteAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KamchatkaService_GetSatelliteAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KamchatkaServiceServer).GetSatelliteAlerts(ctx, req.(*GetSatelliteAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KamchatkaService_ServiceDesc is the grpc.ServiceDesc for KamchatkaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KamchatkaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.KamchatkaService",
	HandlerType: (*KamchatkaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRouteCoordinates",
			Handler:    _KamchatkaService_GetRouteCoordinates_Handler,
		},
		{
			MethodName: "GetRecreationalCapacity",
			Handler:    _KamchatkaService_GetRecreationalCapacity_Handler,
		},
		{
			MethodName: "AddAlert",
			Handler:    _KamchatkaService_AddAlert_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _KamchatkaService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateRecreationalCapacity",
			Handler:    _KamchatkaService_UpdateRecreationalCapacity_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _KamchatkaService_GetGroups_Handler,
		},
		{
			MethodName: "GetGroupTerritories",
			Handler:    _KamchatkaService_GetGroupTerritories_Handler,
		},
		{
			MethodName: "GetSatelliteAlerts",
			Handler:    _KamchatkaService_GetSatelliteAlerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kamchatka.proto",
}
